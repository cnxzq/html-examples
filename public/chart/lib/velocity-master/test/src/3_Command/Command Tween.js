"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("qunit");
const velocity_animate_1 = require("velocity-animate");
const utilities_1 = require("../utilities");
require("./_module");
QUnit.test("Tween", (assert) => {
    const $target1 = utilities_1.getTarget(), startOpacity = $target1.style.opacity;
    assert.expect(11);
    assert.raises(() => velocity_animate_1.default("tween", "invalid"), "Invalid percentComplete throws an error.");
    assert.raises(() => velocity_animate_1.default([$target1, $target1], "tween", "invalid"), "Passing more than one target throws an error.");
    assert.raises(() => velocity_animate_1.default("tween", 0, ["invalid"]), "Invalid propertyMap throws an error.");
    assert.raises(() => velocity_animate_1.default("tween", 0, "invalid", 1), "Property without an element must be forcefed or throw an error.");
    assert.equal($target1.velocity("tween", 0.5, "opacity", [1, 0], "linear"), "0.5", "Calling on an chain returns the correct value.");
    assert.equal(velocity_animate_1.default($target1, "tween", 0.5, "opacity", [1, 0], "linear"), "0.5", "Calling with an element returns the correct value.");
    assert.equal(velocity_animate_1.default("tween", 0.5, "opacity", [1, 0], "linear"), "0.5", "Calling without an element returns the correct value.");
    assert.equal($target1.style.opacity, startOpacity, "Ensure that the element is not altered.");
    assert.equal(typeof velocity_animate_1.default($target1, "tween", 0.5, "opacity", [1, 0], "linear"), "string", "Calling a single property returns a value.");
    assert.equal(typeof velocity_animate_1.default($target1, "tween", 0.5, { opacity: [1, 0] }, "linear"), "object", "Calling a propertiesMap returns an object.");
    assert.deepEqual($target1.velocity("tween", 0.5, { opacity: [1, 0] }, "linear"), velocity_animate_1.default($target1, "tween", 0.5, { opacity: [1, 0] }, "linear"), "Calling directly returns the same as a chain.");
});
